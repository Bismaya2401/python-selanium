{"uid":"a876c32b55ada589","name":"test_e2e_order_flow","fullName":"tests.test_order_flow#test_e2e_order_flow","historyId":"f46712e7a58250385a6db4470272078a","time":{"start":1747299478033,"stop":1747299478033,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location","statusTrace":"self = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x00000164EF570050>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n>               output = SeleniumManager().binary_paths(self._to_args())\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:55: in binary_paths\n    return self._run(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ['C:\\\\Users\\\\bparida\\\\Downloads\\\\ecommerce_automation\\\\.venv\\\\Lib\\\\site-packages\\\\selenium\\\\webdriver\\\\common\\\\windows\\\\selenium-manager.exe', '--browser', 'chrome', '--browser-path', '/usr/bin/chromium-browser', '--language-binding', ...]\n\n    @staticmethod\n    def _run(args: List[str]) -> dict:\n        \"\"\"Executes the Selenium Manager Binary.\n    \n        :Args:\n         - args: the components of the command being executed.\n        :Returns: The log string containing the driver location.\n        \"\"\"\n        command = \" \".join(args)\n        logger.debug(\"Executing process: %s\", command)\n        try:\n            if sys.platform == \"win32\":\n                completed_proc = subprocess.run(args, capture_output=True, creationflags=subprocess.CREATE_NO_WINDOW)\n            else:\n                completed_proc = subprocess.run(args, capture_output=True)\n            stdout = completed_proc.stdout.decode(\"utf-8\").rstrip(\"\\n\")\n            stderr = completed_proc.stderr.decode(\"utf-8\").rstrip(\"\\n\")\n            output = json.loads(stdout) if stdout != \"\" else {\"logs\": [], \"result\": {}}\n        except Exception as err:\n            raise WebDriverException(f\"Unsuccessful command executed: {command}\") from err\n    \n        SeleniumManager._process_logs(output[\"logs\"])\n        result = output[\"result\"]\n        if completed_proc.returncode:\n>           raise WebDriverException(\n                f\"Unsuccessful command executed: {command}; code: {completed_proc.returncode}\\n{result}\\n{stderr}\"\n            )\nE           selenium.common.exceptions.WebDriverException: Message: Unsuccessful command executed: C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\windows\\selenium-manager.exe --browser chrome --browser-path /usr/bin/chromium-browser --language-binding python --output json; code: 65\nE           {'code': 65, 'message': 'Browser path does not exist: /usr/bin/chromium-browser', 'driver_path': '', 'browser_path': ''}\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:129: WebDriverException\n\nThe above exception was the direct cause of the following exception:\n\n    @pytest.fixture(scope=\"function\")\n    def setup_browser():\n        options = Options()\n        options.binary_location = \"/usr/bin/chromium-browser\"  # \uD83D\uDC48 Tell Selenium to use Chromium\n    \n        options.add_argument(\"--incognito\")\n        options.add_argument(\"--start-maximized\")\n        options.add_argument(\"--headless=new\")\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--window-size=1920,1080\")\n    \n>       driver = webdriver.Chrome(options=options)\n\nconftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:51: in __init__\n    if finder.get_browser_path():\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:47: in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x00000164EF570050>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f'The driver path is not a valid file: {output[\"driver_path\"]}')\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n                    raise ValueError(f'The browser path is not a valid file: {output[\"browser_path\"]}')\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {browser}\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:78: NoSuchDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_browser","time":{"start":1747299478035,"stop":1747299478539,"duration":504},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n","statusTrace":"  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\python-selanium\\conftest.py\", line 19, in setup_browser\n    driver = webdriver.Chrome(options=options)\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py\", line 45, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        browser_name=DesiredCapabilities.CHROME[\"browserName\"],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        keep_alive=keep_alive,\n        ^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 51, in __init__\n    if finder.get_browser_path():\n       ~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py\", line 47, in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n           ~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\bparida\\Downloads\\ecommerce_automation\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py\", line 78, in _binary_paths\n    raise NoSuchDriverException(msg) from err\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Purchase"},{"name":"story","value":"Place order successfully"},{"name":"epic","value":"E2E Order Flow"},{"name":"severity","value":"critical"},{"name":"tag","value":"login"},{"name":"tag","value":"regression"},{"name":"tag","value":"smoke"},{"name":"tag","value":"order"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_order_flow"},{"name":"host","value":"GBLNB-PG033XD9"},{"name":"thread","value":"28984-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_order_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["regression","smoke","login","order"]},"source":"a876c32b55ada589.json","parameterValues":[]}